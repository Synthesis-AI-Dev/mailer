// Code generated by MockGen. DO NOT EDIT.
// Source: mailer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	mailer "github.com/Synthesis-AI-Dev/mailer"
	gomock "github.com/golang/mock/gomock"
)

// MockSendEmailResult is a mock of SendEmailResult interface.
type MockSendEmailResult struct {
	ctrl     *gomock.Controller
	recorder *MockSendEmailResultMockRecorder
}

// MockSendEmailResultMockRecorder is the mock recorder for MockSendEmailResult.
type MockSendEmailResultMockRecorder struct {
	mock *MockSendEmailResult
}

// NewMockSendEmailResult creates a new mock instance.
func NewMockSendEmailResult(ctrl *gomock.Controller) *MockSendEmailResult {
	mock := &MockSendEmailResult{ctrl: ctrl}
	mock.recorder = &MockSendEmailResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendEmailResult) EXPECT() *MockSendEmailResultMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockSendEmailResult) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSendEmailResultMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSendEmailResult)(nil).ID))
}

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockMailer) SendEmail(input *mailer.SendEmailInput) (mailer.SendEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", input)
	ret0, _ := ret[0].(mailer.SendEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockMailerMockRecorder) SendEmail(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockMailer)(nil).SendEmail), input)
}
